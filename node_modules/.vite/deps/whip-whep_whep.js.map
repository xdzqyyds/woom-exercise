{
  "version": 3,
  "sources": ["../../whip-whep/whep.js"],
  "sourcesContent": ["/* global navigator */\n/* global window */\n/* global RTCPeerConnection */\n/* global EventSource */\n\nconst Extensions = {\n\tCore: {\n\t\tServerSentEvents    : \"urn:ietf:params:whep:ext:core:server-sent-events\",\n\t\tLayer               : \"urn:ietf:params:whep:ext:core:layer\",\n\t}\n}\n\nexport class WHEPClient extends EventTarget\n{\n\tconstructor()\n\t{\n\t\tsuper();\n\t\t//Ice properties\n\t\tthis.iceUsername = null;\n\t\tthis.icePassword = null;\n\t\t//Pending candidadtes\n\t\tthis.candidates = [];\n\t\tthis.endOfcandidates = false;\n\n\t\tthis.onOffer = offer => offer;\n\t\tthis.onAnswer = answer => answer;\n\t}\n\n\tasync view(pc, url, token)\n\t{\n\t\t//If already publishing\n\t\tif (this.pc)\n\t\t\tthrow new Error(\"Already viewing\")\n\n\t\t//Store pc object and token\n\t\tthis.token = token;\n\t\tthis.pc = pc;\n\n\t\t//Listen for state change events\n\t\tpc.onconnectionstatechange = (event) =>\n\t\t{\n\t\t\tswitch (pc.connectionState)\n\t\t\t{\n\t\t\t\tcase \"connected\":\n\t\t\t\t\t// The connection has become fully connected\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"disconnected\":\n\t\t\t\tcase \"failed\":\n\t\t\t\t\t// One or more transports has terminated unexpectedly or in an error\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"closed\":\n\t\t\t\t\t// The connection has been closed\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t//Listen for candidates\n\t\tpc.onicecandidate = (event) =>\n\t\t{\n\t\t\tif (event.candidate)\n\t\t\t{\n\t\t\t\t//Ignore candidates not from the first m line\n\t\t\t\tif (event.candidate.sdpMLineIndex > 0)\n\t\t\t\t\t//Skip\n\t\t\t\t\treturn;\n\t\t\t\t//Store candidate\n\t\t\t\tthis.candidates.push(event.candidate);\n\t\t\t} else\n\t\t\t{\n\t\t\t\t//No more candidates\n\t\t\t\tthis.endOfcandidates = true;\n\t\t\t}\n\t\t\t//Schedule patch on next tick if there is no already a timer or doing restart\n\t\t\tif (!this.iceTrickeTimeout && !this.restartIce)\n\t\t\t\tthis.iceTrickeTimeout = setTimeout(() => this.patch(), 0);\n\t\t}\n\t\t//Create SDP offer\n\t\tconst offer = await pc.createOffer();\n\t\toffer.sdp = this.onOffer(offer.sdp);\n\n\t\t//Request headers\n\t\tconst headers = {\n\t\t\t\"Content-Type\": \"application/sdp\"\n\t\t};\n\n\t\t//If token is set\n\t\tif (token)\n\t\t\theaders[\"Authorization\"] = \"Bearer \" + token;\n\n\t\t//Do the post request to the WHEP endpoint with the SDP offer\n\t\tconst fetched = await fetch(url, {\n\t\t\tmethod  : \"POST\",\n\t\t\tbody    : offer.sdp,\n\t\t\theaders\n\t\t});\n\n\t\tif (!fetched.ok)\n\t\t\tthrow new Error(\"Request rejected with status \" + fetched.status)\n\t\tif (!fetched.headers.get(\"location\"))\n\t\t\tthrow new Error(\"Response missing location header\")\n\n\t\t//Get the resource url\n\t\tthis.resourceURL = new URL(fetched.headers.get(\"location\"), url);\n\n\t\t//Get the links\n\t\tconst links = {};\n\n\t\t//If the response contained any\n\t\tif (fetched.headers.has(\"link\"))\n\t\t{\n\t\t\t//Get all links headers\n\t\t\tconst linkHeaders  = fetched.headers.get(\"link\").split(/,\\s+(?=<)/)\n\n\t\t\t//For each one\n\t\t\tfor (const header of linkHeaders)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tlet rel, params = {};\n\t\t\t\t\t//Split in parts\n\t\t\t\t\tconst items = header.split(\";\");\n\t\t\t\t\t//Create url server\n\t\t\t\t\tconst url = items[0].trim().replace(/<(.*)>/, \"$1\").trim();\n\t\t\t\t\t//For each other item\n\t\t\t\t\tfor (let i = 1; i < items.length; ++i)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Split into key/val\n\t\t\t\t\t\tconst subitems = items[i].split(/=(.*)/);\n\t\t\t\t\t\t//Get key\n\t\t\t\t\t\tconst key = subitems[0].trim();\n\t\t\t\t\t\t//Unquote value\n\t\t\t\t\t\tconst value = subitems[1]\n\t\t\t\t\t\t\t? subitems[1]\n\t\t\t\t\t\t\t\t.trim()\n\t\t\t\t\t\t\t\t.replaceAll(\"\\\"\", \"\")\n\t\t\t\t\t\t\t\t.replaceAll(\"'\", \"\")\n\t\t\t\t\t\t\t: subitems[1];\n\t\t\t\t\t\t//Check if it is the rel attribute\n\t\t\t\t\t\tif (key === \"rel\")\n\t\t\t\t\t\t\t//Get rel value\n\t\t\t\t\t\t\trel = value;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t//Unquote value and set them\n\t\t\t\t\t\t\tparams[key] = value\n\t\t\t\t\t}\n\t\t\t\t\t//Ensure it is an ice server\n\t\t\t\t\tif (!rel)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif (!links[rel])\n\t\t\t\t\t\tlinks[rel]  = [];\n\t\t\t\t\t//Add to config\n\t\t\t\t\tlinks[rel].push({ url, params });\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(e)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//Get extensions url\n\t\tif (links.hasOwnProperty(Extensions.Core.ServerSentEvents))\n\t\t\t//Get url\n\t\t\tthis.eventsUrl =  new URL(links[Extensions.Core.ServerSentEvents][0].url, url);\n\t\tif (links.hasOwnProperty(Extensions.Core.Layer))\n\t\t\tthis.layerUrl  = new URL(links[Extensions.Core.Layer][0].url, url);\n\n\t\t//If we have an event url\n\t\tif (this.eventsUrl)\n\t\t{\n\t\t\t//Get supported events\n\t\t\tconst events = links[Extensions.Core.ServerSentEvents][0].params.events\n\t\t\t\t? links[Extensions.Core.ServerSentEvents][0].params.events.split(\",\")\n\t\t\t\t: [ \"active\", \"inactive\", \"layers\", \"viewercount\" ];\n\t\t\t//Request headers\n\t\t\tconst headers = {\n\t\t\t\t\"Content-Type\": \"application/json\"\n\t\t\t};\n\n\t\t\t//If token is set\n\t\t\tif (this.token)\n\t\t\t\theaders[\"Authorization\"] = \"Bearer \" + this.token;\n\n\t\t\t//Do the post request to the whep resource\n\t\t\tfetch(this.eventsUrl, {\n\t\t\t\tmethod  : \"POST\",\n\t\t\t\tbody    : JSON.stringify(events),\n\t\t\t\theaders\n\t\t\t}).then((fetched) => {\n\t\t\t\t//If the event channel could be created\n\t\t\t\tif (!fetched.ok)\n\t\t\t\t\treturn;\n\t\t\t\t//Get the resource url\n\t\t\t\tconst sseUrl = new URL(fetched.headers.get(\"location\"), this.eventsUrl);\n\t\t\t\t//Open it\n\t\t\t\tthis.eventSource = new EventSource(sseUrl);\n\t\t\t\t//this.eventSource.onopen = (event) => console.log(event);\n\t\t\t\t//this.eventSource.onerror = (event) => console.log(event);\n\t\t\t\t//Listen for events\n\t\t\t\tthis.eventSource.onmessage = (event) => {\n\t\t\t\t\t//console.dir(event);\n\t\t\t\t\tthis.dispatchEvent(event);\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\t//Get current config\n\t\tconst config = pc.getConfiguration();\n\n\t\t//If it has ice server info and it is not overriden by the client\n\t\tif ((!config.iceServer || !config.iceServer.length) && links.hasOwnProperty(\"ice-server\"))\n\t\t{\n\t\t\t//ICe server config\n\t\t\tconfig.iceServers = [];\n\n\t\t\t//For each one\n\t\t\tfor (const server of links[\"ice-server\"])\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t//Create ice server\n\t\t\t\t\tconst iceServer = {\n\t\t\t\t\t\turls: server.url\n\t\t\t\t\t}\n\t\t\t\t\t//For each other param\n\t\t\t\t\tfor (const [ key, value ] of Object.entries(server.params))\n\t\t\t\t\t{\n\t\t\t\t\t\t//Get key in camel case\n\t\t\t\t\t\tconst camelCase = key.replace(/([-_][a-z])/ig, $1 => $1.toUpperCase().replace(\"-\", \"\").replace(\"_\", \"\"))\n\t\t\t\t\t\t//Unquote value and set them\n\t\t\t\t\t\ticeServer[camelCase] = value;\n\t\t\t\t\t}\n\t\t\t\t\t//Add to config\n\t\t\t\t\tconfig.iceServers.push(iceServer);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t//Ignore errors\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//If any configured\n\t\t\tif (config.iceServers.length)\n\t\t\t\t//Set it\n\t\t\t\tpc.setConfiguration(config);\n\t\t}\n\n\t\t//Get the SDP answer\n\t\tconst answer = await fetched.text();\n\n\t\t//Schedule trickle on next tick\n\t\tif (!this.iceTrickeTimeout)\n\t\t\tthis.iceTrickeTimeout = setTimeout(() => this.patch(), 0);\n\n\t\t//Set local description\n\t\tawait pc.setLocalDescription(offer);\n\n\t\t// TODO: chrome is returning a wrong value, so don't use it for now\n\t\t//try {\n\t\t//\t//Get local ice properties\n\t\t//\tconst local = this.pc.getTransceivers()[0].sender.transport.iceTransport.getLocalParameters();\n\t\t//\t//Get them for transport\n\t\t//\tthis.iceUsername = local.usernameFragment;\n\t\t//\tthis.icePassword = local.password;\n\t\t//} catch (e) {\n\t\t//Fallback for browsers not supporting ice transport\n\t\tthis.iceUsername = offer.sdp.match(/a=ice-ufrag:(.*)\\r\\n/)[1];\n\t\tthis.icePassword = offer.sdp.match(/a=ice-pwd:(.*)\\r\\n/)[1];\n\t\t//}\n\n\t\t//And set remote description\n\t\tawait pc.setRemoteDescription({ type: \"answer\", sdp: this.onAnswer(answer) });\n\t}\n\n\tasync restart()\n\t{\n\t\t//Clear any pendint timeout\n\t\tthis.iceTrickeTimeout = clearTimeout(this.iceTrickeTimeout);\n\n\t\t//Clean candidates and end of candidates flag as new ones will be retrieved\n\t\tthis.candidates = [];\n\t\tthis.endOfcandidates = false;\n\n\t\t//Restart ice\n\t\tthis.pc.restartIce();\n\t\t//Create a new offer\n\t\tconst offer = await this.pc.createOffer({ iceRestart: true });\n\t\t//Update ice\n\t\tthis.iceUsername = offer.sdp.match(/a=ice-ufrag:(.*)\\r\\n/)[1];\n\t\tthis.icePassword = offer.sdp.match(/a=ice-pwd:(.*)\\r\\n/)[1];\n\t\t//Set it\n\t\tawait this.pc.setLocalDescription(offer);\n\n\t\t//Set restart flag time\n\t\tthis.restartIce = new Date();\n\n\t\t//Clear any pendint timeout\n\t\tthis.iceTrickeTimeout = clearTimeout(this.iceTrickeTimeout);\n\n\t\t//patch\n\t\treturn this.patch();\n\t}\n\n\tasync patch()\n\t{\n\t\t//Clear any pendint timeout\n\t\tthis.iceTrickeTimeout = clearTimeout(this.iceTrickeTimeout);\n\n\t\t//Check if there is any pending data\n\t\tif (!(this.candidates.length || this.endOfcandidates || this.restartIce) || !this.resourceURL)\n\t\t\t//Do nothing\n\t\t\treturn;\n\n\t\t//Get data\n\t\tconst candidates = this.candidates;\n\t\tconst endOfcandidates = this.endOfcandidates;\n\t\tconst restartIce = this.restartIce;\n\n\t\t//Clean pending data before async operation\n\t\tthis.candidates = [];\n\t\tthis.endOfcandidates = false;\n\n\t\t//Prepare fragment\n\t\tlet fragment\n\t\t\t= \"a=ice-ufrag:\" + this.iceUsername + \"\\r\\n\"\n\t\t\t+ \"a=ice-pwd:\" + this.icePassword + \"\\r\\n\";\n\t\t//Get peerconnection transceivers\n\t\tconst transceivers = this.pc.getTransceivers();\n\t\t//Get medias\n\t\tconst medias = {};\n\t\t//If doing something else than a restart\n\t\tif (candidates.length || endOfcandidates)\n\t\t\t//Create media object for first media always\n\t\t\tmedias[transceivers[0].mid] = {\n\t\t\t\tmid         : transceivers[0].mid,\n\t\t\t\tkind        : transceivers[0].receiver.track.kind,\n\t\t\t\tcandidates  : [],\n\t\t\t};\n\t\t//For each candidate\n\t\tfor (const candidate of candidates)\n\t\t{\n\t\t\t//Get mid for candidate\n\t\t\tconst mid = candidate.sdpMid\n\t\t\t//Get associated transceiver\n\t\t\tconst transceiver = transceivers.find(t => t.mid === mid);\n\t\t\t//Get media\n\t\t\tlet media = medias[mid];\n\t\t\t//If not found yet\n\t\t\tif (!media)\n\t\t\t\t//Create media object\n\t\t\t\tmedia = medias[mid] = {\n\t\t\t\t\tmid,\n\t\t\t\t\tkind        : transceiver.receiver.track.kind,\n\t\t\t\t\tcandidates  : [],\n\t\t\t\t};\n\t\t\t//Add candidate\n\t\t\tmedia.candidates.push(candidate);\n\t\t}\n\t\t//For each media\n\t\tfor (const media of Object.values(medias))\n\t\t{\n\t\t\t//Add media to fragment\n\t\t\tfragment\n\t\t\t\t+= \"m=\" + media.kind + \" 9 UDP/TLS/RTP/SAVPF 0\\r\\n\"\n\t\t\t\t+ \"a=mid:\" + media.mid + \"\\r\\n\";\n\t\t\t//Add candidate\n\t\t\tfor (const candidate of media.candidates)\n\t\t\t\tfragment += \"a=\" + candidate.candidate + \"\\r\\n\";\n\t\t\tif (endOfcandidates)\n\t\t\t\tfragment += \"a=end-of-candidates\\r\\n\";\n\t\t}\n\n\t\t//Request headers\n\t\tconst headers = {\n\t\t\t\"Content-Type\": \"application/trickle-ice-sdpfrag\"\n\t\t};\n\n\t\t//If doing an ice restart\n\t\tif (restartIce)\n\t\t\t//Set if match to any\n\t\t\theaders[\"If-Match\"] = \"*\";\n\t\telse if (this.etag)\n\t\t\t//Set if match to last known etag\n\t\t\theaders[\"If-Match\"] = this.etag;\n\n\t\t//If token is set\n\t\tif (this.token)\n\t\t\theaders[\"Authorization\"] = \"Bearer \" + this.token;\n\n\t\t//Do the post request to the WHIP resource\n\t\tconst fetched = await fetch(this.resourceURL, {\n\t\t\tmethod  : \"PATCH\",\n\t\t\tbody    : fragment,\n\t\t\theaders\n\t\t});\n\t\tif (!fetched.ok && fetched.status !== 501 && fetched.status !== 405)\n\t\t\tthrow new Error(\"Request rejected with status \" + fetched.status)\n\n\t\t//If we have got an answer for the ice restart\n\t\tif (restartIce && fetched.status === 200)\n\t\t{\n\t\t\t//Get etag\n\t\t\tthis.etag = fetched.headers.get(\"etag\");\n\n\t\t\t//Get the SDP answer\n\t\t\tconst answer = await fetched.text();\n\t\t\t//Get remote icename and password\n\t\t\tconst iceUsername = answer.match(/a=ice-ufrag:(.*)\\r\\n/)[1];\n\t\t\tconst icePassword = answer.match(/a=ice-pwd:(.*)\\r\\n/)[1];\n\t\t\tconst candidates = Array.from(answer.matchAll(/(a=candidate:.*\\r\\n)/gm)).map(res => res[1])\n\n\t\t\t//Get current remote rescription\n\t\t\tconst remoteDescription = this.pc.remoteDescription;\n\n\t\t\t//Change username and password\n\t\t\tremoteDescription.sdp = remoteDescription.sdp.replaceAll(/(a=ice-ufrag:)(.*)\\r\\n/gm, \"$1\" + iceUsername + \"\\r\\n\");\n\t\t\tremoteDescription.sdp = remoteDescription.sdp.replaceAll(/(a=ice-pwd:)(.*)\\r\\n/gm, \"$1\" + icePassword + \"\\r\\n\");\n\n\t\t\t//Remove all candidates\n\t\t\tremoteDescription.sdp = remoteDescription.sdp.replaceAll(/(a=candidate:.*\\r\\n)/gm, \"\");\n\n\t\t\t//Add candidates\n\t\t\tremoteDescription.sdp = remoteDescription.sdp.replaceAll(/(m=.*\\r\\n)/gm, \"$1\" + candidates.join());\n\n\t\t\t//Set it\n\t\t\tawait this.pc.setRemoteDescription(remoteDescription);\n\n\t\t\t//If we are still the last ice restart\n\t\t\tif (this.restartIce === restartIce)\n\t\t\t{\n\t\t\t\t//Clean the flag\n\t\t\t\tthis.restartIce = null;\n\t\t\t\t//Check if there is any pending data\n\t\t\t\tif (this.candidates.length || this.endOfcandidates)\n\t\t\t\t\t//Tricke again\n\t\t\t\t\tthis.patch();\n\t\t\t}\n\t\t}\n\t}\n\n\tasync mute(muted)\n\t{\n\t\t//Request headers\n\t\tconst headers = {\n\t\t\t\"Content-Type\": \"application/json\"\n\t\t};\n\n\t\t//If token is set\n\t\tif (this.token)\n\t\t\theaders[\"Authorization\"] = \"Bearer \" + this.token;\n\n\t\t//Do the post request to the whep resource\n\t\tconst fetched = await fetch(this.resourceURL, {\n\t\t\tmethod  : \"POST\",\n\t\t\tbody    : JSON.stringify(muted),\n\t\t\theaders\n\t\t});\n\t}\n\n\tasync selectLayer(layer)\n\t{\n\t\tif (!this.layerUrl)\n\t\t\tthrow new Error(\"whep resource does not support layer selection\");\n\n\t\t//Request headers\n\t\tconst headers = {\n\t\t\t\"Content-Type\": \"application/json\"\n\t\t};\n\n\t\t//If token is set\n\t\tif (this.token)\n\t\t\theaders[\"Authorization\"] = \"Bearer \" + this.token;\n\n\t\t//Do the post request to the whep resource\n\t\tconst fetched = await fetch(this.layerUrl, {\n\t\t\tmethod  : \"POST\",\n\t\t\tbody    : JSON.stringify(layer),\n\t\t\theaders\n\t\t});\n\t}\n\n\tasync unselectLayer()\n\t{\n\t\tif (!this.layerUrl)\n\t\t\tthrow new Error(\"whep resource does not support layer selection\");\n\n\n\t\t//Request headers\n\t\tconst headers = {};\n\n\t\t//If token is set\n\t\tif (this.token)\n\t\t\theaders[\"Authorization\"] = \"Bearer \" + this.token;\n\n\t\t//Do the post request to the whep resource\n\t\tconst fetched = await fetch(this.layerUrl, {\n\t\t\tmethod: \"DELETE\",\n\t\t\theaders\n\t\t});\n\t}\n\n\tasync stop()\n\t{\n\t\tif (!this.pc)\n\t\t{\n\t\t\t// Already stopped\n\t\t\treturn\n\t\t}\n\n\t\t//Cancel any pending timeout\n\t\tthis.iceTrickeTimeout = clearTimeout(this.iceTrickeTimeout);\n\n\t\t//Close peerconnection\n\t\tthis.pc.close();\n\n\t\t//Null\n\t\tthis.pc = null;\n\n\t\t//If we don't have the resource url\n\t\tif (!this.resourceURL)\n\t\t\tthrow new Error(\"WHEP resource url not available yet\");\n\n\t\t//Request headers\n\t\tconst headers = {\n\t\t};\n\n\t\t//If token is set\n\t\tif (this.token)\n\t\t\theaders[\"Authorization\"] = \"Bearer \" + this.token;\n\n\t\t//Send a delete\n\t\tawait fetch(this.resourceURL, {\n\t\t\tmethod: \"DELETE\",\n\t\t\theaders\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["url", "headers", "fetched", "candidates"]
}
